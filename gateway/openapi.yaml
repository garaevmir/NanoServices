openapi: 3.0.0
info:
  title: Social Network API
  version: 1.0.0
  description: API для управления пользователями и постами
servers:
  - url: http://localhost:8080
    description: Локальный сервер

tags:
  - name: Authentication
    description: Методы для регистрации и аутентификации
  - name: Profile
    description: Управление профилем пользователя
  - name: Posts
    description: Работа с постами
  - name: Interactions
    description: Взаимодействия с постами (лайки, просмотры, комментарии)

paths:
  /api/register:
    post:
      tags:
        - Authentication
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: testuser
                password:
                  type: string
                  example: password123
                email:
                  type: string
                  example: test@example.com
              required:
                - username
                - password
                - email
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        "400":
          description: Неверный формат данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to create user"

  /api/login:
    post:
      tags:
        - Authentication
      summary: Аутентификация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: testuser
                password:
                  type: string
                  example: password123
              required:
                - username
                - password
      responses:
        "200":
          description: Аутентификация успешна
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication successful"
                  Token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMmZhZmQ0ODYtYTQ5OS00MzQwLTllNDEtNTk1ZjRmNGJjNWU2In0.mrnmO230x9RAAoLHLMK5Rjt5x4tovQdXPExKwcmTjDI"
        "401":
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "generating token error"

  /api/profile:
    get:
      tags:
        - Profile
      summary: Получение профиля пользователя
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: testuser
      responses:
        "200":
          description: Профиль пользователя успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  user_id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  birthdate:
                    type: string
                    format: date
                    example: "1990-01-01"
                  phone_number:
                    type: string
                    example: "+1234567890"
                  bio:
                    type: string
                    example: "Software engineer and open-source enthusiast."
                  created_at:
                    type: string
                    format: date-time
                    example: "2023-10-01T12:34:56Z"
        "404":
          description: Профиль пользователя не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    example: "Profile not found"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    example: "Failed to fetch profile"

    post:
      tags:
        - Profile
      summary: Обновление профиля пользователя
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: testuser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                birthdate:
                  type: string
                  format: date
                  example: "1990-01-01"
                phone_number:
                  type: string
                  example: "+1234567890"
                bio:
                  type: string
                  example: "Updated bio"
      responses:
        "200":
          description: Профиль успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
        "400":
          description: Неверный формат данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    example: "Invalid input"
        "404":
          description: Профиль пользователя не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    example: "Profile not found"
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    example: "Failed to fetch profile"

  /api/posts:
    post:
      tags: [Posts]
      summary: Создать пост
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostRequest"
      responses:
        "201":
          description: Пост создан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/posts_list:
    get:
      tags: [Posts]
      summary: Список постов
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostsListResponse"

  /api/posts/{id}:
    get:
      tags: [Posts]
      summary: Получить пост по ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags: [Posts]
      summary: Обновить пост
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePostRequest"
      responses:
        "200":
          description: Пост обновлен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponse"

    delete:
      tags: [Posts]
      summary: Удалить пост
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Пост удален
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"

  /api/posts/view/{id}:
    post:
      tags: [Interactions]
      summary: Зарегистрировать просмотр поста
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Просмотр зарегистрирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /api/posts/like/{id}:
    post:
      tags: [Interactions]
      summary: Поставить лайк посту
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Лайк успешно добавлен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /api/posts/comment/{id}:
    post:
      tags: [Interactions]
      summary: Добавить комментарий к посту
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
      responses:
        "201":
          description: Комментарий создан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/posts/comments/{id}:
    get:
      tags: [Interactions]
      summary: Получить комментарии поста
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Список комментариев
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentsListResponse"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  schemas:
    CreatePostRequest:
      type: object
      required: [title, description]
      properties:
        title:
          type: string
          minLength: 3
          example: "My First Post"
        description:
          type: string
          minLength: 10
          example: "This is my first post in the network"
        is_private:
          type: boolean
          default: false
        tags:
          type: array
          items:
            type: string
          example: ["tech", "blog"]

    PostsListResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/PostResponse"
        total:
          type: integer
          description: Общее количество постов
          example: 42
      required: [posts, total]

    RegisterRequest:
      type: object
      required: [username, password, email]
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
          format: email

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    PostResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        user_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: string

    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string

    SuccessMessage:
      type: object
      properties:
        message:
          type: string

    CommentRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          minLength: 1
          example: "Отличный пост!"

    CommentResponse:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        user_id:
          type: string
        created_at:
          type: string
          format: date-time

    CommentsListResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: "#/components/schemas/CommentResponse"
        total:
          type: integer
          example: 15

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Не авторизован
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    BadRequest:
      description: Неверный запрос
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
